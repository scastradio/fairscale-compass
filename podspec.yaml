# n8n-clean.yaml
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: n8n-data
  namespace: default
spec:
  accessModes: [ "ReadWriteOnce" ]
  resources:
    requests:
      storage: 10Gi
  # Change/remove this if your cluster uses a different storage class
  storageClassName: do-block-storage
---
apiVersion: v1
kind: Secret
metadata:
  name: n8n-secrets
  namespace: default
type: Opaque
stringData:
  # Replace these with strong values
  N8N_ENCRYPTION_KEY: "replace-with-a-strong-random-string"
  N8N_BASIC_AUTH_USER: "mo@storecast.net"
  N8N_BASIC_AUTH_PASSWORD: "XFeYbDZV@123"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: n8n
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels: { app: n8n }
  template:
    metadata:
      labels: { app: n8n }
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
      containers:
        - name: n8n
          # Pin to a recent stable release
          image: docker.n8n.io/n8nio/n8n:1.106.3
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5678
          env:
            - name: N8N_PORT
              value: "5678"
            - name: N8N_PROTOCOL
              value: "https"
            - name: N8N_HOST
              value: "n8n.bot.prnt.gg"
            - name: WEBHOOK_URL
              value: "https://n8n.bot.prnt.gg/"
            - name: GENERIC_TIMEZONE
              value: "Africa/Johannesburg"
            - name: N8N_DIAGNOSTICS_ENABLED
              value: "false"
            - name: N8N_HIRING_BANNER_ENABLED
              value: "false"
            - name: N8N_PERSONALIZATION_ENABLED
              value: "false"
            - name: N8N_LOG_LEVEL
              value: "debug"
            - name: N8N_BASIC_AUTH_ACTIVE
              value: "true"
            - name: N8N_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: n8n-secrets
                  key: N8N_ENCRYPTION_KEY
            - name: N8N_BASIC_AUTH_USER
              valueFrom:
                secretKeyRef:
                  name: n8n-secrets
                  key: N8N_BASIC_AUTH_USER
            - name: N8N_BASIC_AUTH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: n8n-secrets
                  key: N8N_BASIC_AUTH_PASSWORD
          volumeMounts:
            - name: data
              mountPath: /home/node/.n8n
          # Probes use the built-in /healthz endpoint
          startupProbe:
            httpGet: { path: /healthz, port: 5678 }
            failureThreshold: 30
            periodSeconds: 5
          readinessProbe:
            httpGet: { path: /healthz, port: 5678 }
            initialDelaySeconds: 15
            periodSeconds: 10
          livenessProbe:
            httpGet: { path: /healthz, port: 5678 }
            initialDelaySeconds: 30
            periodSeconds: 20
          resources:
            requests: { cpu: "100m", memory: "256Mi" }
            limits: { cpu: "1", memory: "1Gi" }
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: n8n-data
---
apiVersion: v1
kind: Service
metadata:
  name: n8n
  namespace: default
spec:
  selector: { app: n8n }
  ports:
    - name: http
      port: 80
      targetPort: 5678
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: n8n
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: letsencrypt-dns
    nginx.ingress.kubernetes.io/proxy-body-size: "20m"
spec:
  ingressClassName: nginx
  tls:
    - hosts: [ "n8n.bot.prnt.gg" ]
      secretName: n8n-tls
  rules:
    - host: n8n.bot.prnt.gg
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: n8n
                port:
                  number: 80
